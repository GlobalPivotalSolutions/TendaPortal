/*
 * 
 * Copyright (c) CSIRO Astronomy and Space Science
 * Author Arkadi.Kosmynin@csiro.au
 * 
 */
package au.csiro.cass.arch.logProcessing;

import java.util.Date;
import java.util.LinkedList;

import org.apache.hadoop.conf.Configurable;
import org.apache.nutch.plugin.Pluggable;

/**
 * Interface to be implemented by a log line parser plugin
 * 
 * @author Arkadi Kosmynin
 *
 */
public interface LogLineParser extends Pluggable, Configurable
{
 
 public final static String X_POINT_ID = LogLineParser.class.getName();
 
 /**
  * Parse a log line 
  * 
  * @param ln - input string. Normally, a line read from a log file.
  * @return true if a valid line was parsed, false if the line should be ignored.
  */
  public boolean parse( String ln ) ;

  /**
   * Extract date from a log line 
   * 
   * @param ln input string. Normally, a line read from a log file.
   * @return true if a date was found and parsed, else false.
   */
   public boolean parseDate( String ln ) ;

  /**
   * Parse a log line 
   * 
   * @param ln - input string. Normally, a line read from a log file.
   * @param forDate - true if only extract date from line, false if do full parsing and checking 
   */
  public boolean parse( String ln, boolean forDate ) ;

 /**
 * Get date of the log line 
 * 
 * @return date of the log line 
 */
 Date getDate() ;       // date of the log line

 /**
 * Get IP addresses of access sources
 * 
 * @return LinkedList with IP addresses as Strings 
 */
 LinkedList getAddr() ; // client IP addresses

 /**
  * Get accessed URL
  * 
  * @return accessed URL
  */
 String getUrl() ;      // requested URL

 /**
  * Get canonical URL
  * 
  * @return canonical URL
  */
 String getCanonicalUrl() ;      // canonical URL

 /**
  * Get server return code
  * 
  * @return server return code
  */
 int getCode() ;      // requested URL

 /**
  * Get line score
  * 
  * @return 1 if at least one IP is valid and not blacklisted, else 0
  */
 int getScore() ;      // requested URL

 /**
 * Check if the line is 'good': has a valid date, not generated by a source
 * with blacklisted IP address, and accesses a parseable file.
 * 
 * @return true if the line is 'good'.
 */
 boolean isGood() ;     // true if the line is good
 
 
 /**
  * Get log site object
  * 
  * @return logSite object
  */
 public LogSite getLogSite() ;

 /**
  * Set log site object
  * 
  * @param logSite object
  */
 public void setLogSite( LogSite logSite ) ;

}
